CREATE DATABASE sistema_ventas_multi;
USE sistema_ventas_multi;

-- Tabla de Negocios (Eliminada la dependencia circular)
CREATE TABLE NEGOCIOS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(100) NOT NULL,
    direccion TEXT NOT NULL,
    telefono VARCHAR(20) NOT NULL,
    ruc VARCHAR(20) NOT NULL UNIQUE,
    logo VARCHAR(255),
    fecha_registro DATETIME DEFAULT CURRENT_TIMESTAMP,
    activo BOOLEAN DEFAULT TRUE,
    configuracion_iva DECIMAL(4,2) DEFAULT 15.00,
    CONSTRAINT chk_iva CHECK (configuracion_iva >= 0 AND configuracion_iva <= 100),
    CONSTRAINT chk_telefono_format CHECK (telefono REGEXP '^[0-9+-]{8,20}$')
);

-- Tabla de Usuarios
CREATE TABLE USUARIOS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50) NOT NULL,
    apellido VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL,
    password VARCHAR(255) NOT NULL,
    telefono VARCHAR(20),
    fecha_registro DATETIME DEFAULT CURRENT_TIMESTAMP,
    activo BOOLEAN DEFAULT TRUE,
    imagen_perfil VARCHAR(255),
    ultimo_acceso DATETIME,
    negocio_id INT NOT NULL,
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    CONSTRAINT uk_email_negocio UNIQUE (email, negocio_id),
    CONSTRAINT chk_email_format CHECK (email REGEXP '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$')
);

-- Nueva tabla para administradores de negocio
CREATE TABLE NEGOCIO_ADMINISTRADORES (
    negocio_id INT,
    usuario_id INT,
    es_principal BOOLEAN DEFAULT FALSE,
    PRIMARY KEY (negocio_id, usuario_id),
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    FOREIGN KEY (usuario_id) REFERENCES USUARIOS(id)
);

-- Tabla de Roles
CREATE TABLE ROLES (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50) NOT NULL,
    descripcion TEXT,
    fecha_creacion DATETIME DEFAULT CURRENT_TIMESTAMP,
    activo BOOLEAN DEFAULT TRUE,
    negocio_id INT NOT NULL,
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    CONSTRAINT uk_rol_negocio UNIQUE (nombre, negocio_id)
);

-- Tabla de Permisos
CREATE TABLE PERMISOS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50) NOT NULL UNIQUE,
    descripcion TEXT,
    modulo VARCHAR(50) NOT NULL
);

-- Tabla de relación Usuarios-Roles
CREATE TABLE USUARIOS_ROLES (
    usuario_id INT,
    rol_id INT,
    PRIMARY KEY (usuario_id, rol_id),
    FOREIGN KEY (usuario_id) REFERENCES USUARIOS(id),
    FOREIGN KEY (rol_id) REFERENCES ROLES(id)
);

-- Tabla de relación Roles-Permisos
CREATE TABLE ROLES_PERMISOS (
    rol_id INT,
    permiso_id INT,
    PRIMARY KEY (rol_id, permiso_id),
    FOREIGN KEY (rol_id) REFERENCES ROLES(id),
    FOREIGN KEY (permiso_id) REFERENCES PERMISOS(id)
);

-- Nueva tabla de Ubicaciones
CREATE TABLE UBICACIONES (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT,
    negocio_id INT NOT NULL,
    activo BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    CONSTRAINT uk_ubicacion_negocio UNIQUE (nombre, negocio_id)
);

-- Tabla de Categorías
CREATE TABLE CATEGORIAS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50) NOT NULL,
    descripcion TEXT,
    porcentaje_ganancia DECIMAL(5,2) NOT NULL,
    fecha_creacion DATETIME DEFAULT CURRENT_TIMESTAMP,
    creado_por_usuario INT,
    activo BOOLEAN DEFAULT TRUE,
    imagen VARCHAR(255),
    negocio_id INT NOT NULL,
    FOREIGN KEY (creado_por_usuario) REFERENCES USUARIOS(id),
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    CONSTRAINT uk_categoria_negocio UNIQUE (nombre, negocio_id),
    CONSTRAINT chk_porcentaje CHECK (porcentaje_ganancia >= 0)
);

-- Tabla de Marcas
CREATE TABLE MARCAS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50) NOT NULL,
    descripcion TEXT,
    imagen VARCHAR(255),
    activo BOOLEAN DEFAULT TRUE,
    negocio_id INT NOT NULL,
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    CONSTRAINT uk_marca_negocio UNIQUE (nombre, negocio_id)
);

-- Tabla de Proveedores
CREATE TABLE PROVEEDORES (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(100) NOT NULL,
    ruc_cedula VARCHAR(20) NOT NULL,
    direccion TEXT,
    telefono VARCHAR(20),
    email VARCHAR(100),
    contacto_nombre VARCHAR(100),
    activo BOOLEAN DEFAULT TRUE,
    negocio_id INT NOT NULL,
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    CONSTRAINT uk_proveedor_ruc_negocio UNIQUE (ruc_cedula, negocio_id)
);

-- Tabla de Productos (actualizada)
CREATE TABLE PRODUCTOS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT,
    codigo_barras VARCHAR(50),
    precio_costo DECIMAL(10,2) NOT NULL,
    precio_venta DECIMAL(10,2) NOT NULL,
    stock_minimo INT NOT NULL DEFAULT 5,
    categoria_id INT,
    marca_id INT,
    proveedor_id INT,
    activo BOOLEAN DEFAULT TRUE,
    imagen VARCHAR(255),
    fecha_creacion DATETIME DEFAULT CURRENT_TIMESTAMP,
    ultima_actualizacion DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    negocio_id INT NOT NULL,
    FOREIGN KEY (categoria_id) REFERENCES CATEGORIAS(id),
    FOREIGN KEY (marca_id) REFERENCES MARCAS(id),
    FOREIGN KEY (proveedor_id) REFERENCES PROVEEDORES(id),
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    CONSTRAINT uk_codigo_barras_negocio UNIQUE (codigo_barras, negocio_id),
    CONSTRAINT chk_precios CHECK (precio_venta >= precio_costo AND precio_costo >= 0)
);

-- Nueva tabla de Stock por Ubicación
CREATE TABLE PRODUCTO_STOCK (
    producto_id INT,
    ubicacion_id INT,
    cantidad INT NOT NULL DEFAULT 0,
    PRIMARY KEY (producto_id, ubicacion_id),
    FOREIGN KEY (producto_id) REFERENCES PRODUCTOS(id),
    FOREIGN KEY (ubicacion_id) REFERENCES UBICACIONES(id),
    CONSTRAINT chk_cantidad_stock CHECK (cantidad >= 0)
);

-- Nueva tabla de Historial de Precios
CREATE TABLE HISTORIAL_PRECIOS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    producto_id INT,
    precio_costo DECIMAL(10,2) NOT NULL,
    precio_venta DECIMAL(10,2) NOT NULL,
    fecha_inicio DATETIME NOT NULL,
    fecha_fin DATETIME,
    usuario_id INT,
    FOREIGN KEY (producto_id) REFERENCES PRODUCTOS(id),
    FOREIGN KEY (usuario_id) REFERENCES USUARIOS(id)
);

-- Tabla de Clientes
CREATE TABLE CLIENTES (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50) NOT NULL,
    apellido VARCHAR(50) NOT NULL,
    tipo_documento VARCHAR(20),
    numero_documento VARCHAR(20),
    direccion TEXT,
    telefono VARCHAR(20),
    email VARCHAR(100),
    fecha_registro DATETIME DEFAULT CURRENT_TIMESTAMP,
    activo BOOLEAN DEFAULT TRUE,
    negocio_id INT NOT NULL,
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    CONSTRAINT uk_cliente_documento_negocio UNIQUE (tipo_documento, numero_documento, negocio_id)
);

-- Nueva tabla de Métodos de Pago
CREATE TABLE METODOS_PAGO (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(50) NOT NULL,
    descripcion TEXT,
    requiere_referencia BOOLEAN DEFAULT FALSE,
    activo BOOLEAN DEFAULT TRUE,
    negocio_id INT NOT NULL,
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    CONSTRAINT uk_metodo_pago_negocio UNIQUE (nombre, negocio_id)
);

-- Tabla de Ventas (actualizada)
CREATE TABLE VENTAS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    fecha DATETIME DEFAULT CURRENT_TIMESTAMP,
    usuario_id INT,
    cliente_id INT,
    subtotal DECIMAL(10,2) NOT NULL,
    iva DECIMAL(10,2) NOT NULL,
    descuento DECIMAL(10,2) DEFAULT 0,
    total DECIMAL(10,2) NOT NULL,
    tipo_documento VARCHAR(20) NOT NULL,
    numero_documento VARCHAR(20) NOT NULL,
    estado VARCHAR(20) DEFAULT 'PENDIENTE',
    notas TEXT,
    negocio_id INT NOT NULL,
    ubicacion_id INT NOT NULL,
    FOREIGN KEY (usuario_id) REFERENCES USUARIOS(id),
    FOREIGN KEY (cliente_id) REFERENCES CLIENTES(id),
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    FOREIGN KEY (ubicacion_id) REFERENCES UBICACIONES(id),
    CONSTRAINT uk_documento_venta_negocio UNIQUE (tipo_documento, numero_documento, negocio_id),
    CONSTRAINT chk_total CHECK (total >= 0)
);


CREATE TABLE FACTURAS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    venta_id INT NOT NULL,
    serie_documento VARCHAR(20) NOT NULL,
    numero_documento VARCHAR(20) NOT NULL,
    numero_autorizacion VARCHAR(50),
    fecha_emision DATETIME DEFAULT CURRENT_TIMESTAMP,
    estado VARCHAR(20) DEFAULT 'ACTIVA',
    negocio_id INT NOT NULL,
    FOREIGN KEY (venta_id) REFERENCES VENTAS(id),
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    CONSTRAINT uk_factura_documento UNIQUE (serie_documento, numero_documento, negocio_id)
);

-- Nueva tabla de Pagos
CREATE TABLE PAGOS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    venta_id INT,
    metodo_pago_id INT,
    monto DECIMAL(10,2) NOT NULL,
    fecha_pago DATETIME DEFAULT CURRENT_TIMESTAMP,
    referencia VARCHAR(100),
    estado VARCHAR(20) DEFAULT 'COMPLETADO',
    usuario_id INT,
    FOREIGN KEY (venta_id) REFERENCES VENTAS(id),
    FOREIGN KEY (metodo_pago_id) REFERENCES METODOS_PAGO(id),
    FOREIGN KEY (usuario_id) REFERENCES USUARIOS(id),
    CONSTRAINT chk_monto_pago CHECK (monto > 0)
);

-- Tabla de Detalle de Venta
CREATE TABLE DETALLE_VENTA (
    id INT PRIMARY KEY AUTO_INCREMENT,
    venta_id INT,
    producto_id INT,
    cantidad INT NOT NULL,
    precio_unitario DECIMAL(10,2) NOT NULL,
    descuento DECIMAL(10,2) DEFAULT 0,
    subtotal DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (venta_id) REFERENCES VENTAS(id),
    FOREIGN KEY (producto_id) REFERENCES PRODUCTOS(id),
    CONSTRAINT chk_cantidad CHECK (cantidad > 0)
);

-- Tabla de Caja Diaria
CREATE TABLE CAJA_DIARIA (
    id INT PRIMARY KEY AUTO_INCREMENT,
    fecha DATE NOT NULL,
    monto_inicial DECIMAL(10,2) NOT NULL,
    monto_final DECIMAL(10,2),
    total_ventas DECIMAL(10,2) DEFAULT 0,
    total_devoluciones DECIMAL(10,2) DEFAULT 0,
    usuario_apertura_id INT,
    usuario_cierre_id INT,
    hora_apertura DATETIME NOT NULL,
    hora_cierre DATETIME,
    estado VARCHAR(20) DEFAULT 'ABIERTA',
    notas TEXT,
    negocio_id INT NOT NULL,
    ubicacion_id INT NOT NULL,
    FOREIGN KEY (usuario_apertura_id) REFERENCES USUARIOS(id),
    FOREIGN KEY (usuario_cierre_id) REFERENCES USUARIOS(id),
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    FOREIGN KEY (ubicacion_id) REFERENCES UBICACIONES(id),
    CONSTRAINT uk_caja_fecha_ubicacion_negocio UNIQUE (fecha, ubicacion_id, negocio_id)
);

-- Tabla de Movimientos de Caja
CREATE TABLE MOVIMIENTOS_CAJA (
    id INT PRIMARY KEY AUTO_INCREMENT,
    caja_id INT,
    fecha_hora DATETIME DEFAULT CURRENT_TIMESTAMP,
    tipo_movimiento VARCHAR(20) NOT NULL,
    monto DECIMAL(10,2) NOT NULL,
    descripcion TEXT,
    usuario_id INT,
    FOREIGN KEY (caja_id) REFERENCES CAJA_DIARIA(id),
    FOREIGN KEY (usuario_id) REFERENCES USUARIOS(id)
);

-- Tabla de Devoluciones (actualizada)
CREATE TABLE DEVOLUCIONES (
    id INT PRIMARY KEY AUTO_INCREMENT,
    venta_id INT,
    fecha DATETIME DEFAULT CURRENT_TIMESTAMP,
    motivo TEXT NOT NULL,
    monto DECIMAL(10,2) NOT NULL,
    estado VARCHAR(20) DEFAULT 'PENDIENTE',
    usuario_id INT,
    negocio_id INT NOT NULL,
    ubicacion_id INT NOT NULL,
    FOREIGN KEY (venta_id) REFERENCES VENTAS(id),
    FOREIGN KEY (usuario_id) REFERENCES USUARIOS(id),
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    FOREIGN KEY (ubicacion_id) REFERENCES UBICACIONES(id)
);

-- Tabla de Auditoría de Inventario (actualizada)
CREATE TABLE AUDITORIA_INVENTARIO (
    id INT PRIMARY KEY AUTO_INCREMENT,
    producto_id INT,
    ubicacion_id INT,
    tipo_movimiento VARCHAR(20) NOT NULL,
    cantidad INT NOT NULL,
    stock_anterior INT NOT NULL,
    stock_nuevo INT NOT NULL,
    motivo TEXT,
    fecha DATETIME DEFAULT CURRENT_TIMESTAMP,
    usuario_id INT,
    negocio_id INT NOT NULL,
    FOREIGN KEY (producto_id) REFERENCES PRODUCTOS(id),
    FOREIGN KEY (ubicacion_id) REFERENCES UBICACIONES(id),
    FOREIGN KEY (usuario_id) REFERENCES USUARIOS(id),
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id)
);

-- Tabla de Auditoría General
CREATE TABLE AUDITORIA (
    id INT PRIMARY KEY AUTO_INCREMENT,
    tabla VARCHAR(50) NOT NULL,
    accion VARCHAR(20) NOT NULL,
    datos_anteriores TEXT,
    datos_nuevos TEXT,
    usuario_id INT,
    fecha DATETIME DEFAULT CURRENT_TIMESTAMP,
    ip_address VARCHAR(45),
    negocio_id INT NOT NULL,
    FOREIGN KEY (usuario_id) REFERENCES USUARIOS(id),
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id)
);

CREATE TABLE VEHICULOS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    cliente_id INT NOT NULL,
    marca VARCHAR(50) NOT NULL,
    modelo VARCHAR(50) NOT NULL,
    anio VARCHAR(4) NOT NULL,
    placa VARCHAR(20) NOT NULL,
    color VARCHAR(30),
    kilometraje DECIMAL(10,2),
    vin VARCHAR(50),
    fecha_registro DATETIME DEFAULT CURRENT_TIMESTAMP,
    activo BOOLEAN DEFAULT TRUE,
    negocio_id INT NOT NULL,
    FOREIGN KEY (cliente_id) REFERENCES CLIENTES(id),
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    CONSTRAINT uk_placa_negocio UNIQUE (placa, negocio_id),
    CONSTRAINT chk_anio CHECK (anio REGEXP '^[0-9]{4}$')
);

-- Tabla de Tipos de Servicio
CREATE TABLE TIPOS_SERVICIO (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT,
    negocio_id INT NOT NULL,
    activo BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    CONSTRAINT uk_tipo_servicio_negocio UNIQUE (nombre, negocio_id)
);

-- Tabla de Servicios (actualizada)
CREATE TABLE SERVICIOS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    tipo_servicio_id INT NOT NULL,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT,
    precio_base DECIMAL(10,2) NOT NULL,
    duracion_estimada INT NOT NULL,
    activo BOOLEAN DEFAULT TRUE,
    negocio_id INT NOT NULL,
    FOREIGN KEY (tipo_servicio_id) REFERENCES TIPOS_SERVICIO(id),
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    CONSTRAINT uk_servicio_negocio UNIQUE (nombre, negocio_id),
    CONSTRAINT chk_duracion CHECK (duracion_estimada > 0),
    CONSTRAINT chk_precio_servicio CHECK (precio_base >= 0)
);

-- Tabla de Técnicos (actualizada)
CREATE TABLE TECNICOS (
    usuario_id INT PRIMARY KEY,
    especialidad VARCHAR(100),
    tipo_servicio_id INT,
    disponible BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (usuario_id) REFERENCES USUARIOS(id),
    FOREIGN KEY (tipo_servicio_id) REFERENCES TIPOS_SERVICIO(id)
);

-- Tabla de Órdenes de Trabajo (actualizada)
CREATE TABLE ORDENES_TRABAJO (
    id INT PRIMARY KEY AUTO_INCREMENT,
    numero_orden VARCHAR(20) NOT NULL,
    fecha_ingreso DATETIME DEFAULT CURRENT_TIMESTAMP,
    fecha_estimada_entrega DATETIME,
    fecha_entrega DATETIME,
    vehiculo_id INT NOT NULL,
    tecnico_id INT NOT NULL,
    kilometraje_ingreso DECIMAL(10,2),
    estado VARCHAR(20) DEFAULT 'PENDIENTE',
    descripcion_problema TEXT,
    diagnostico TEXT,
    observaciones TEXT,
    subtotal DECIMAL(10,2) NOT NULL DEFAULT 0,
    iva DECIMAL(10,2) NOT NULL DEFAULT 0,
    total DECIMAL(10,2) NOT NULL DEFAULT 0,
    venta_id INT,
    negocio_id INT NOT NULL,
    FOREIGN KEY (vehiculo_id) REFERENCES VEHICULOS(id),
    FOREIGN KEY (tecnico_id) REFERENCES TECNICOS(usuario_id),
    FOREIGN KEY (venta_id) REFERENCES VENTAS(id),
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    CONSTRAINT uk_numero_orden_negocio UNIQUE (numero_orden, negocio_id),
    CONSTRAINT chk_fechas_orden CHECK (fecha_estimada_entrega >= fecha_ingreso)
);

-- Tabla de Estados de Orden de Trabajo
CREATE TABLE ESTADOS_ORDEN_TRABAJO (
    id INT PRIMARY KEY AUTO_INCREMENT,
    orden_trabajo_id INT NOT NULL,
    estado VARCHAR(20) NOT NULL,
    fecha_cambio DATETIME DEFAULT CURRENT_TIMESTAMP,
    usuario_id INT NOT NULL,
    notas TEXT,
    FOREIGN KEY (orden_trabajo_id) REFERENCES ORDENES_TRABAJO(id),
    FOREIGN KEY (usuario_id) REFERENCES USUARIOS(id)
);

-- Tabla de Servicios realizados (actualizada)
CREATE TABLE ORDEN_TRABAJO_SERVICIOS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    orden_trabajo_id INT NOT NULL,
    servicio_id INT NOT NULL,
    tecnico_id INT NOT NULL,
    precio DECIMAL(10,2) NOT NULL,
    fecha_inicio DATETIME,
    fecha_fin DATETIME,
    estado VARCHAR(20) DEFAULT 'PENDIENTE',
    observaciones TEXT,
    FOREIGN KEY (orden_trabajo_id) REFERENCES ORDENES_TRABAJO(id),
    FOREIGN KEY (servicio_id) REFERENCES SERVICIOS(id),
    FOREIGN KEY (tecnico_id) REFERENCES TECNICOS(usuario_id),
    CONSTRAINT chk_fechas_servicio CHECK (fecha_fin >= fecha_inicio)
);

-- Nueva tabla de Estados de Servicios
CREATE TABLE ESTADOS_SERVICIO (
    id INT PRIMARY KEY AUTO_INCREMENT,
    orden_trabajo_servicio_id INT NOT NULL,
    estado VARCHAR(20) NOT NULL,
    fecha_cambio DATETIME DEFAULT CURRENT_TIMESTAMP,
    usuario_id INT NOT NULL,
    notas TEXT,
    FOREIGN KEY (orden_trabajo_servicio_id) REFERENCES ORDEN_TRABAJO_SERVICIOS(id),
    FOREIGN KEY (usuario_id) REFERENCES USUARIOS(id)
);

-- Tabla de Productos usados (actualizada)
CREATE TABLE ORDEN_TRABAJO_PRODUCTOS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    orden_trabajo_id INT NOT NULL,
    producto_id INT NOT NULL,
    cantidad INT NOT NULL,
    precio_unitario DECIMAL(10,2) NOT NULL,
    subtotal DECIMAL(10,2) NOT NULL,
    ubicacion_id INT NOT NULL,
    FOREIGN KEY (orden_trabajo_id) REFERENCES ORDENES_TRABAJO(id),
    FOREIGN KEY (producto_id) REFERENCES PRODUCTOS(id),
    FOREIGN KEY (ubicacion_id) REFERENCES UBICACIONES(id),
    CONSTRAINT chk_cantidad_producto CHECK (cantidad > 0)
);

-- Tabla de Fotos de la Orden de Trabajo (actualizada)
CREATE TABLE ORDEN_TRABAJO_FOTOS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    orden_trabajo_id INT NOT NULL,
    url_foto VARCHAR(255) NOT NULL,
    descripcion TEXT,
    tipo VARCHAR(50),
    fecha_registro DATETIME DEFAULT CURRENT_TIMESTAMP,
    usuario_id INT NOT NULL,
    FOREIGN KEY (orden_trabajo_id) REFERENCES ORDENES_TRABAJO(id),
    FOREIGN KEY (usuario_id) REFERENCES USUARIOS(id)
);

-- Tabla de Cotizaciones (actualizada)
CREATE TABLE COTIZACIONES (
    id INT PRIMARY KEY AUTO_INCREMENT,
    numero_cotizacion VARCHAR(20) NOT NULL,
    fecha DATETIME DEFAULT CURRENT_TIMESTAMP,
    cliente_id INT,
    vehiculo_id INT,
    subtotal DECIMAL(10,2) NOT NULL,
    iva DECIMAL(10,2) NOT NULL,
    total DECIMAL(10,2) NOT NULL,
    validez_dias INT DEFAULT 15,
    estado VARCHAR(20) DEFAULT 'PENDIENTE',
    notas TEXT,
    usuario_id INT NOT NULL,
    negocio_id INT NOT NULL,
    FOREIGN KEY (cliente_id) REFERENCES CLIENTES(id),
    FOREIGN KEY (vehiculo_id) REFERENCES VEHICULOS(id),
    FOREIGN KEY (usuario_id) REFERENCES USUARIOS(id),
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    CONSTRAINT uk_numero_cotizacion_negocio UNIQUE (numero_cotizacion, negocio_id),
    CONSTRAINT chk_validez CHECK (validez_dias > 0)
);

-- Tabla de Servicios en Cotización (actualizada)
CREATE TABLE COTIZACION_SERVICIOS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    cotizacion_id INT NOT NULL,
    servicio_id INT NOT NULL,
    precio DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (cotizacion_id) REFERENCES COTIZACIONES(id),
    FOREIGN KEY (servicio_id) REFERENCES SERVICIOS(id),
    CONSTRAINT chk_precio_cotizacion CHECK (precio >= 0)
);

-- Tabla de Productos en Cotización (actualizada)
CREATE TABLE COTIZACION_PRODUCTOS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    cotizacion_id INT NOT NULL,
    producto_id INT NOT NULL,
    cantidad INT NOT NULL,
    precio_unitario DECIMAL(10,2) NOT NULL,
    subtotal DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (cotizacion_id) REFERENCES COTIZACIONES(id),
    FOREIGN KEY (producto_id) REFERENCES PRODUCTOS(id),
    CONSTRAINT chk_cantidad_cotizacion CHECK (cantidad > 0)
);

-- Tabla de Horarios de Trabajo (actualizada)
CREATE TABLE HORARIOS_TRABAJO (
    id INT PRIMARY KEY AUTO_INCREMENT,
    dia_semana INT NOT NULL,
    hora_inicio TIME NOT NULL,
    hora_fin TIME NOT NULL,
    intervalo_citas INT NOT NULL,
    activo BOOLEAN DEFAULT TRUE,
    negocio_id INT NOT NULL,
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    CONSTRAINT chk_dia_semana CHECK (dia_semana BETWEEN 1 AND 7),
    CONSTRAINT chk_horario CHECK (hora_fin > hora_inicio),
    CONSTRAINT chk_intervalo CHECK (intervalo_citas > 0)
);

-- Tabla de Citas (actualizada)
CREATE TABLE CITAS (
    id INT PRIMARY KEY AUTO_INCREMENT,
    fecha DATE NOT NULL,
    hora_inicio TIME NOT NULL,
    hora_fin TIME NOT NULL,
    cliente_id INT NOT NULL,
    vehiculo_id INT,
    servicio_id INT,
    tecnico_id INT,
    estado VARCHAR(20) DEFAULT 'PROGRAMADA',
    notas TEXT,
    orden_trabajo_id INT,
    negocio_id INT NOT NULL,
    FOREIGN KEY (cliente_id) REFERENCES CLIENTES(id),
    FOREIGN KEY (vehiculo_id) REFERENCES VEHICULOS(id),
    FOREIGN KEY (servicio_id) REFERENCES SERVICIOS(id),
    FOREIGN KEY (tecnico_id) REFERENCES TECNICOS(usuario_id),
    FOREIGN KEY (orden_trabajo_id) REFERENCES ORDENES_TRABAJO(id),
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id),
    CONSTRAINT uk_fecha_hora_tecnico_negocio UNIQUE (fecha, hora_inicio, tecnico_id, negocio_id),
    CONSTRAINT chk_horas_cita CHECK (hora_fin > hora_inicio)
);


-- Tabla para configuración de notificaciones por negocio
CREATE TABLE CONFIGURACION_NOTIFICACIONES (
    id INT PRIMARY KEY AUTO_INCREMENT,
    negocio_id INT NOT NULL,
    recordatorio_24h BOOLEAN DEFAULT TRUE,
    recordatorio_2h BOOLEAN DEFAULT TRUE,
    notificar_email BOOLEAN DEFAULT TRUE,
    notificar_whatsapp BOOLEAN DEFAULT TRUE,
    notificar_sms BOOLEAN DEFAULT TRUE,
    plantilla_confirmacion TEXT,
    plantilla_recordatorio TEXT,
    whatsapp_api_key VARCHAR(255),
    sms_api_key VARCHAR(255),
    smtp_config TEXT,
    FOREIGN KEY (negocio_id) REFERENCES NEGOCIOS(id)
);

-- Tabla para el registro de notificaciones enviadas
CREATE TABLE NOTIFICACIONES (
    id INT PRIMARY KEY AUTO_INCREMENT,
    cita_id INT NOT NULL,
    tipo_notificacion VARCHAR(50), -- CONFIRMACION, RECORDATORIO_24H, RECORDATORIO_2H
    canal VARCHAR(20), -- EMAIL, WHATSAPP, SMS
    contenido TEXT,
    estado VARCHAR(20), -- ENVIADO, FALLIDO, PENDIENTE
    fecha_envio DATETIME,
    fecha_lectura DATETIME,
    respuesta TEXT,
    FOREIGN KEY (cita_id) REFERENCES CITAS(id)
);

-- Modificar la tabla CITAS existente para incluir campos adicionales
ALTER TABLE CITAS
ADD COLUMN confirmacion_requerida BOOLEAN DEFAULT TRUE,
ADD COLUMN estado_confirmacion VARCHAR(20) DEFAULT 'PENDIENTE',
ADD COLUMN fecha_confirmacion DATETIME,
ADD COLUMN recordatorio_enviado BOOLEAN DEFAULT FALSE,
ADD COLUMN color VARCHAR(7) DEFAULT '#3498db';